///////////////////////////////////////////////////////////////////////////////
//
// A simple shader manager class for manager shaders.
// We assume we only have a single shader for each type.
// Therefore shader management become feasible and necesaary
//
// Jianfei Zhou 2021/1/30
//
///////////////////////////////////////////////////////////////////////////////
#pragma once
#include <vector>

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
enum SHADER_TYPE;
class Shader;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ShaderManager
{
public:
	ShaderManager() {}
	~ShaderManager() {}

	Shader* GetShaderByType(SHADER_TYPE _shaderType);
	void AddShaderByType(Shader* _shader, SHADER_TYPE _shaderType);
	void RemoveShaderByType(SHADER_TYPE _shaderType);
	void ClearShaders();
	const int GetNumberOfShaders() { return (const int)Shaders.size(); }
private:
	std::vector<Shader*> Shaders;

};
